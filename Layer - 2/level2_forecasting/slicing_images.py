# -*- coding: utf-8 -*-
"""slicing_images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bgEVHSFf86Iqo4L2eydNjrLVX3QmvTPo
"""

from PIL import Image
import gdal
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from osgeo import osr

img_pc = gdal.Open('/content/drive/MyDrive/Land Degradation Neutrality/thar_2016_pc.tif')
img_lst = gdal.Open('/content/drive/MyDrive/Land Degradation Neutrality/thar_2016_lst.tif')
img_evi = gdal.Open('/content/drive/MyDrive/Land Degradation Neutrality/thar_2016_evi_.tif')

img = gdal.Open('/content/temp.tif')
imarray = img.ReadAsArray()
imarray.shape

globals()['width'] = img_pc.RasterXSize
globals()['height'] = img_pc.RasterYSize
globals()['geotransform_info'] = img_pc.GetGeoTransform()
globals()['projection_info'] = img_pc.GetProjection()

imarray[0, :, :].shape

a_array = img_pc.GetRasterBand(1).ReadAsArray()
b_array = img_lst.GetRasterBand(1).ReadAsArray()
c_array = img_evi.GetRasterBand(1).ReadAsArray()

driver = gdal.GetDriverByName("GTiff")
output_file = '/content/temp.tif'
output_tiff = driver.Create(output_file,width,height,3,gdal.GDT_Float64)
output_tiff.GetRasterBand(1).WriteArray(a_array)
output_tiff.GetRasterBand(1).SetNoDataValue(-9999)
output_tiff.GetRasterBand(2).WriteArray(b_array)
output_tiff.GetRasterBand(2).SetNoDataValue(-9999)
output_tiff.GetRasterBand(3).WriteArray(c_array)
output_tiff.GetRasterBand(3).SetNoDataValue(-9999)
output_tiff.SetGeoTransform(geotransform_info)
srs = osr.SpatialReference()
srs.ImportFromWkt(projection_info)
output_tiff.SetProjection( srs.ExportToWkt() )
output_tiff = None

def weighted_binary_crossentropy(y_true, y_pred):
  class_loglosses = K.mean(K.binary_crossentropy(y_true, y_pred), axis=[0, 1, 2])
  return K.sum(class_loglosses * K.constant(class_weights))

img = gdal.Open('/content/temp.tif')

globals()['width'] = img.RasterXSize
globals()['height'] = img.RasterYSize
globals()['geotransform_info'] = img.GetGeoTransform()
globals()['projection_info'] = img.GetProjection()

imarray = img.ReadAsArray()

bands, rows, cols = imarray.shape


upperlimit_X = int(np.ceil(rows/256))
upperlimit_Y = int(np.ceil(cols/255))

def predict_image(original_image_path, model_path):

  img = gdal.Open(original_image_path)

  globals()['width'] = img.RasterXSize
  globals()['height'] = img.RasterYSize
  globals()['geotransform_info'] = img.GetGeoTransform()
  globals()['projection_info'] = img.GetProjection()

  imarray = img.ReadAsArray()

  bands, rows, cols = imarray.shape

  upperlimit_X = int(np.ceil(rows/256))
  upperlimit_Y = int(np.ceil(cols/255))

  img_new = np.zeros((upperlimit_X*256, upperlimit_Y*256, bands))
  pred_img = np.zeros((upperlimit_X*256, upperlimit_Y*256))
  img_new[:rows, :cols, 0] = imarray[0, :, :]
  img_new[:rows, :cols, 1] = imarray[1, :, :]
  img_new[:rows, :cols, 2] = imarray[2, :, :]


  model = tf.keras.models.load_model(model_path, custom_objects={'weighted_binary_crossentropy':                   
                                      weighted_binary_crossentropy})

  for i in range(upperlimit_Y):
    for j in range(upperlimit_X):

      y_start_idx = i*256
      y_end_idx = y_start_idx + 256

      x_start_idx = j*256
      x_end_idx = x_start_idx + 256

      img_to_pred = img_new[x_start_idx:x_end_idx, y_start_idx:y_end_idx, :]
      img_to_pred = img_to_pred.reshape((1,256,256,3))

      result = model.predict(img_to_pred)[:,:,:,0]
      result = result.reshape((256,256))

      pred_img[x_start_idx:x_end_idx, y_start_idx:y_end_idx] = result

  final = pred_img[:rows, :cols]

  print(final.shape)

  driver = gdal.GetDriverByName("GTiff")
  output_file = '/content/result.tif'
  output_tiff = driver.Create(output_file,width,height,1,gdal.GDT_Float64)
  output_tiff.GetRasterBand(1).WriteArray(final)
  output_tiff.GetRasterBand(1).SetNoDataValue(-9999)
  output_tiff.SetGeoTransform(geotransform_info)
  srs = osr.SpatialReference()
  srs.ImportFromWkt(projection_info)
  output_tiff.SetProjection( srs.ExportToWkt() )
  output_tiff = None
  
  return final

res = predict_image('/content/temp.tif', '/content/drive/MyDrive/Land Degradation Neutrality/Erosion/erosion.hdf5')

res.shape

img.shape

img = gdal.Open('/content/result.tif')
img = img.ReadAsArray()
print(img.shape)
plt.figure(figsize=(15,15))
plt.imshow(res)

count = 0
for i in range(1,20):

  original = '/content/drive/MyDrive/Land Degradation Neutrality/image/image' + str(i) + '.png'
  gt = '/content/drive/MyDrive/Land Degradation Neutrality/label/image' + str(i) + '.png'
  res = predict_image(original, '/content/drive/MyDrive/Land Degradation Neutrality/Erosion/erosion.hdf5')

  plt.figure(figsize=(20,60))
  plt.subplot(20,3,count+1)
  img = Image.open(original)
  img = np.array(img)
  plt.imshow(img)
  plt.subplot(20,3,count+2)
  img = Image.open(gt)
  img = np.array(img)
  plt.imshow(img)
  plt.subplot(20,3,count+3)
  plt.imshow(res)

  count += 3

