# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Level2_Forecasting
                                 A QGIS plugin
 Calculate LD map using input features and forecasting model

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-28
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Sharad
        email                : email@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QAbstractItemView, QFileDialog
from qgis.PyQt import QtGui
from qgis.utils import iface
import gdal
import numpy as np
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .level2_forecasting_dialog import Level2_ForecastingDialog
import os.path
import os

from . import interpolation_script as iscript
from . import predicting_erosion as pred_ero
from . import Working_Popup_User_Final as User_Scenario
cwd = os.getcwd()

class Level2_Forecasting:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Level2_Forecasting_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Level 2 Forecasting')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Level2_Forecasting', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/level2_forecasting/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Level 2 Forecasting'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Level 2 Forecasting'),
                action)
            self.iface.removeToolBarIcon(action)


    #==================================================
    #==================================================
    #==================================================

    def get_output_directory(self):
        output_directory = str(QFileDialog.getExistingDirectory(None, "Select Directory"))
        self.dlg.lineEdit.setText(output_directory)

    def get_shape_file(self):
        shape_file_name, _filter = QFileDialog.getOpenFileName(self.dlg, "Select shape file", "", "*.shp")
        self.dlg.lineEdit_2.setText(shape_file_name)

    def get_pc_series(self):
        series_name, _filter = QFileDialog.getOpenFileName(self.dlg, "Select time series for pc", "", "*.tif")
        self.dlg.lineEdit_8.setText(series_name)

    def get_lst_series(self):
        series_name, _filter = QFileDialog.getOpenFileName(self.dlg, "Select time series for lst", "", "*.tif")
        self.dlg.lineEdit_9.setText(series_name)

    def get_evi_series(self):
        series_name, _filter = QFileDialog.getOpenFileName(self.dlg, "Select time series for evi", "", "*.tif")
        self.dlg.lineEdit_13.setText(series_name)

    def get_normalization_directory(self):
        directory, _filter = str(QFileDialog.getExistingDirectory(None, "Select Directory"))
        self.dlg.lineEdit_11.setText(directory)

    def interpolation_method_pc(self):
        if self.dlg.radioButton_9.isChecked():
            return 'CubicSpline'
        elif self.dlg.radioButton_10.isChecked():
            return 'polynomial'
        elif self.dlg.radioButton_11.isChecked():
            return 'linear'

    def interpolation_method_lst(self):
        if self.dlg.radioButton_12.isChecked():
            return 'CubicSpline'
        elif self.dlg.radioButton_13.isChecked():
            return 'polynomial'
        elif self.dlg.radioButton_14.isChecked():
            return 'linear'

    def interpolation_method_evi(self):
        if self.dlg.radioButton_20.isChecked():
            return 'CubicSpline'
        elif self.dlg.radioButton_21.isChecked():
            return 'polynomial'
        elif self.dlg.radioButton_22.isChecked():
            return 'linear'

    def choose_method(self):
        if self.dlg.radioButton_17.isChecked():
            return 'RUSL'
        elif self.dlg.radioButton_18.isChecked():
            return 'WRF'
        elif self.dlg.radioButton_19.isChecked():
            return 'CNN'

    def clipper_select(self):
        if self.dlg.radioButton.isChecked():
            return [self.dlg.lineEdit_2.text(), 'shape']
 

        elif self.dlg.radioButton_2.isChecked():
            coords = self.read_coordinates()
            return [coords, 'coords']

    def read_interpolate_year(self):
        date = self.dlg.dateEdit_3.date().toPyDate()
        date = str(date)
        year = date.split('-')[-1]
        return year

    def meta_data_master(self, name, output_directory):
        data_name = name.split('/')[-1]
        data_name = data_name.split('.')[0]
        data = gdal.Open(name)
        data_array = data.GetRasterBand(1).ReadAsArray()
        with open(output_directory + '/' + data_name + '_metadata.txt', 'w') as file:
            file.write(data_name)
            file.write('\n\nmax\t->\t' + str(np.max(data_array)))
            file.write('\nmin\t->\t' + str(np.min(data_array)))
            file.write('\nmean\t->\t' + str(np.mean(data_array)))
        iface.messageBar().pushMessage("Success", "Metadata file saved", duration = 1.5)

    def meta_data_1(self):
        name = str(self.dlg.lineEdit_8.text())
        output_directory = str(self.dlg.lineEdit.text())
        self.meta_data_master(name, output_directory)


    def meta_data_2(self):
        name = str(self.dlg.lineEdit_9.text())
        output_directory = str(self.dlg.lineEdit.text())
        self.meta_data_master(name, output_directory)

    def meta_data_3(self):
        name = str(self.dlg.lineEdit_13.text())
        output_directory = str(self.dlg.lineEdit.text())
        self.meta_data_master(name, output_directory)

    def get_scenario(self):
        scenario_file, _filter = QFileDialog.getOpenFileName(self.dlg, "Select LU scenario", "", "*.shx")
        self.dlg.lineEdit_12.setText(scenario_file)        

    def user_scenario(self):
        w = User_Scenario.MyWnd(self.iface.activeLayer())
        return w

    def user_scenario_temp(self):
        w = self.user_scenario()
        w.show()

    def user_scenario_shp(self):
        if self.dlg.radioButton_24.isChecked():
            return str(self.dlg.lineEdit_12.text())
        else:
            return False

    def final(self):

        clipper = self.clipper_select()

        method_pc = self.interpolation_method_pc()
        method_lst = self.interpolation_method_lst()
        method_evi = self.interpolation_method_evi()

        forcasting_method = self.choose_method()

        if self.dlg.radioButton_15.isChecked():
            normalization_directory = str(self.dlg.lineEdit_11.text())
        else:
            normalization_directory = False

      #  output_data_reso = float(self.dlg.lineEdit_12.text())

       # project_name = self.dlg.lineEdit_3.text()

        interpolate_year = self.read_interpolate_year()
        pc_directory = self.dlg.lineEdit_8.text()
        lst_directory = self.dlg.lineEdit_9.text()
        evi_directory = self.dlg.lineEdit_13.text()
        output_directory = self.dlg.lineEdit.text()
        user_scenario = self.user_scenario_shp()

        if user_scenario:
            lst_dir = output_directory + '/interpolated_lst_LU.tif'
            evi_dir = output_directory + '/interpolated_evi_LU.tif'
            pc_dir = output_directory + '/pc_file.tif'
        else:
            lst_dir = output_directory + '/interpolated_lst.tif'
            evi_dir = output_directory + '/interpolated_evi.tif'
            pc_dir = output_directory + '/pc_file.tif'            

        iscript.interpolate(interpolate_year, method_lst, pc_directory, output_directory, normalization_directory, user_scenario)
        iscript.interpolate(interpolate_year, method_lst, lst_directory, output_directory, normalization_directory, user_scenario)
        iscript.interpolate(interpolate_year, method_evi, evi_directory, output_directory, normalization_directory, user_scenario)


        path_temp = str(__file__).split("\\")[:-1]
        path_temp = '\\'.join(path_temp)
        model_path = path_temp + '/erosion.hdf5'

        if forcasting_method == 'CNN':
            image = pred_ero.generate_input(pc_directory, lst_dir, evi_dir, output_directory)
            result = pred_ero.predict_image(image, model_path, output_directory)

        self.iface.addRasterLayer(result)


    def end(self):
        self.dlg.lineEdit.clear()
        self.dlg.lineEdit_2.clear()
        self.dlg.textEdit.clear()
        self.dlg.textEdit_2.clear()
        self.dlg.textEdit_3.clear()
        self.dlg.textEdit_4.clear()
        self.dlg.close()


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Level2_ForecastingDialog()

        # show the dialog
        self.dlg.show()


        self.dlg.pushButton_3.clicked.connect(self.get_output_directory)
        self.dlg.pushButton_4.clicked.connect(self.get_shape_file)
        
        self.dlg.pushButton_10.clicked.connect(self.get_pc_series)
        self.dlg.pushButton_11.clicked.connect(self.get_lst_series)
        self.dlg.pushButton_12.clicked.connect(self.get_evi_series)

        self.dlg.pushButton_2.clicked.connect(self.get_normalization_directory)

        self.dlg.pushButton_7.clicked.connect(self.meta_data_1)
        self.dlg.pushButton_8.clicked.connect(self.meta_data_2)
        self.dlg.pushButton_9.clicked.connect(self.meta_data_3)

        self.dlg.pushButton_15.clicked.connect(self.get_scenario)
        self.dlg.pushButton.clicked.connect(self.user_scenario_temp)
        self.dlg.pushButton_5.clicked.connect(self.end)


        self.dlg.pushButton_6.clicked.connect(self.final)









        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
