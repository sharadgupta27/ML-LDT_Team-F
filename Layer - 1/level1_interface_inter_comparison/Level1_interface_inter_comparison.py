# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Level1_interface_inter_comparison
                                 A QGIS plugin
 Calculate weighted average of input data sets in each pixel locations
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-28
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Sharad
        email                : email@email.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QAbstractItemView, QFileDialog
from qgis.PyQt import QtGui
from qgis.utils import iface
from sklearn.preprocessing import MinMaxScaler
from PyQt5.QtWidgets import QMessageBox
from qgis.PyQt.QtWidgets import QProgressBar
import time
import numpy as np
from qgis.core import QgsApplication, QgsMessageLog, Qgis, QgsGeometry

from qgis.gui import (
    QgsMessageBar,
)

import gdal
import ogr
import os
import math
from osgeo import gdal,osr
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Level1_interface_inter_comparison_dialog import Level1_interface_inter_comparisonDialog
import os.path


class Level1_interface_inter_comparison:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Level1_interface_inter_comparison_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Level 1 - Modelling & Monitoring')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Level1_interface_inter_comparison', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Level1_interface_inter_comparison/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Inter Comparison Mode'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Level 1 Inter-Comparison-Mode'),
                action)
            self.iface.removeToolBarIcon(action)

    def get_output_directory(self):
        output_directory = str(QFileDialog.getExistingDirectory(None, "Select Directory"))
        self.dlg.lineEdit.setText(output_directory)
    
    def get_shape_file(self):
        shape_file_name, _filter = QFileDialog.getOpenFileName(self.dlg, "Select shape file", "", "*.shp")
        self.dlg.lineEdit_2.setText(shape_file_name)

    def get_data1(self):
        data_name, _filter = QFileDialog.getOpenFileName(self.dlg, "Select data file", "", "*.tif")   
        self.dlg.lineEdit_9.setText(data_name)

    def get_data2(self):
        data_name, _fitler = QFileDialog.getOpenFileName(self.dlg, "Select data file", "", "*.tif")
        self.dlg.lineEdit_10.setText(data_name)

    def get_data3(self):
        data_name, _filter = QFileDialog.getOpenFileName(self.dlg, "Select data file", "", "*.tif")
        self.dlg.lineEdit_17.setText(data_name)
    '''
    def read_start_end(self):
        start = self.dlg.dateEdit.date().toPyDate()
        start = str(start)
        start = '/'.join(start.split('-'))
        end = self.dlg.dateEdit_2.date().toPyDate()
        end = str(end)
        end = '/'.join(end.split('-'))
        return [start, end]
    '''

    def read_coordinates(self):
        spatial_extent = []
        spatial_extent.append(str(self.dlg.textEdit.toPlainText()))
        spatial_extent.append(str(self.dlg.textEdit_2.toPlainText()))
        spatial_extent.append(str(self.dlg.textEdit_3.toPlainText()))
        spatial_extent.append(str(self.dlg.textEdit_4.toPlainText()))
        return spatial_extent

    def clipper_select(self):
        if self.dlg.radioButton.isChecked():
            self.dlg.pushButton_4.clicked.connect(self.get_shape_file)
            return [self.dlg.lineEdit_2.text(), 'shape']
        elif self.dlg.radioButton_2.isChecked():
            coords = self.read_coordinates()
            return [coords, 'coords']

    def Normalization(self):
        if self.dlg.radioButton_5.isChecked():
            return True
        if self.dlg.radioButton_6.isChecked():
            return False

    def threshold_value(self):
        return str(self.dlg.lineEdit_14.text())


    def Output_resolution(self):
        selected = str(self.dlg.comboBox.currentText())
        return selected

    def get_nbase_directory(self):
        data_name, _filter = QFileDialog.getOpenFileName(self.dlg, "Select UNCCD file", "", "*.tif")
        self.dlg.lineEdit_15.setText(data_name)

    def export(self, a, output_directory, name):
        driver = gdal.GetDriverByName("GTiff")
        output_file = output_directory + '/' + name
        output_tiff = driver.Create(output_file,width,height,1,gdal.GDT_Float64)
        output_tiff.GetRasterBand(1).WriteArray(a)
        output_tiff.GetRasterBand(1).SetNoDataValue(-999)
        output_tiff.SetGeoTransform(geotransform_info)
        srs = osr.SpatialReference()
        srs.ImportFromWkt(projection_info)
        output_tiff.SetProjection( srs.ExportToWkt() )
        output_tiff = None

    def meta_data_master(self, name, output_directory):
        data_name = name.split('/')[-1]
        data_name = data_name.split('.')[0]
        data = gdal.Open(name)
        data_array = data.GetRasterBand(1).ReadAsArray()
        data_array = data_array[np.logical_not(np.isnan(data_array))]
        with open(output_directory + '/' + data_name + '_metadata.txt', 'w') as file:
            file.write(data_name)
            file.write('\n\nmax\t->\t' + str(np.max(data_array)))
            file.write('\nmin\t->\t' + str(np.min(data_array)))
            file.write('\nmean\t->\t' + str(np.mean(data_array)))
        iface.messageBar().pushMessage("Success", "Metadata file saved", duration = 1.5)

    def meta_data_1(self):
        name = str(self.dlg.lineEdit_9.text())
        output_directory = str(self.dlg.lineEdit.text())
        self.meta_data_master(name, output_directory)


    def meta_data_2(self):
        name = str(self.dlg.lineEdit_10.text())
        output_directory = str(self.dlg.lineEdit.text())
        self.meta_data_master(name, output_directory)

    def meta_data_3(self):
        name = str(self.dlg.lineEdit_17.text())
        output_directory = str(self.dlg.lineEdit.text())
        self.meta_data_master(name, output_directory)

    #======================================================================================

    def final(self):
        output_directory = str(self.dlg.lineEdit.text())
        
        name = "output_intercomparison.tif"
       # name1 = str(self.dlg.lineEdit_9.text()).split('/')[-1]
       # name2 = str(self.dlg.lineEdit_10.text()).split('/')[-1]
       # name3 = str(self.dlg.lineEdit_17.text()).split('/')[-1]

        data_1 = gdal.Open(str(self.dlg.lineEdit_9.text()))
        data_2 = gdal.Open(str(self.dlg.lineEdit_10.text()))
        data_3 = gdal.Open(str(self.dlg.lineEdit_17.text()))
        globals()['width']=data_1.RasterXSize
        globals()['height']=data_1.RasterYSize
        globals()['geotransform_info']=data_1.GetGeoTransform()
        globals()['projection_info'] =data_1.GetProjection()

        data1_array = data_1.GetRasterBand(1).ReadAsArray()
        data2_array = data_2.GetRasterBand(1).ReadAsArray()
        data3_array = data_3.GetRasterBand(1).ReadAsArray()

        data1_array = data1_array.astype('float64')
        data2_array = data2_array.astype('float64')
        data3_array = data3_array.astype('float64')

        data1_array *= float(self.dlg.lineEdit_11.text())
        data2_array *= float(self.dlg.lineEdit_12.text())
        data3_array *= float(self.dlg.lineEdit_16.text())

        data_array = data1_array + data2_array + data3_array

        if self.dlg.radioButton_6.isChecked():
            Unccd = gdal.Open(str(self.dlg.lineEdit_15.text()))
            Unccd_array = Unccd.ReadAsArray()
            Unccd_array1d = Unccd_array.reshape(width*height, 1)
            data_array1d = data_array.reshape(width*height, 1)

            ref_vec = np.ma.masked_invalid(Unccd_array1d)
            img_vec = np.ma.masked_invalid(data_array1d)

            filtered_img = np.ma.masked_equal(img_vec, 0.0)
            filtered_ref = np.ma.masked_equal(ref_vec, 0.0)

            r_max = np.max(filtered_ref)
            r_min = np.min(filtered_ref)

            i_max = np.mean(filtered_img, axis=0) + 3.5*np.std(filtered_img, axis = 0)
            i_min = np.mean(filtered_img, axis=0) - 3.5*np.std(filtered_img, axis = 0)
            gain = (r_max - r_min)/(i_max - i_min)
            final_array = np.empty([height, width], dtype = float)
            new_img = gain*(data_array - i_min)


        self.export(data_array, output_directory, name)
      #  self.export(data2_array, output_directory, name2)
      #  self.export(data3_array, output_directory, name3)

        self.iface.addRasterLayer(output_directory + '/' + name)
      #  self.iface.addRasterLayer(output_directory + '/' + name2)
      #  self.iface.addRasterLayer(output_directory + '/' + name3)
        self.iface.messageBar().pushMessage("Success", "Tool execution finished.", level=Qgis.Success)
        self.dlg.close()


    #======================================================================================

    def end(self):
        self.dlg.lineEdit_2.clear()
        self.dlg.textEdit.clear()
        self.dlg.textEdit_2.clear()
        self.dlg.textEdit_3.clear()
        self.dlg.textEdit_4.clear()
        self.dlg.radioButton.setChecked(True)
       # self.dlg.radioButton_3.setChecked(False)
       # self.dlg.radioButton_4.setChecked(False)
        self.dlg.radioButton_5.setChecked(False)
        self.dlg.radioButton_6.setChecked(False)
        self.dlg.close()
        self.iface.messageBar().pushMessage("Success", "GeoLDN tool executed successfully.", level=Qgis.Success)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Level1_interface_inter_comparisonDialog()
            self.iface.messageBar().pushMessage("Success", "GeoLDN tool started successfully.", level=Qgis.Success)

        # show the dialog
        self.dlg.show()
        self.iface.messageBar().pushMessage("Success", "GeoLDN tool started successfully.", level=Qgis.Success)
        # Run the dialog event loop

        self.dlg.radioButton.setChecked(True)
        self.dlg.pushButton_3.clicked.connect(self.get_output_directory)
        self.dlg.pushButton_9.clicked.connect(self.get_data1)
        self.dlg.pushButton_8.clicked.connect(self.get_data2)
        self.dlg.pushButton_11.clicked.connect(self.get_data3)
        self.dlg.pushButton_4.clicked.connect(self.get_shape_file)
        self.dlg.pushButton_2.clicked.connect(self.get_nbase_directory)        
        self.dlg.pushButton_7.clicked.connect(self.meta_data_1)
        self.dlg.pushButton_6.clicked.connect(self.meta_data_2)
        self.dlg.pushButton_10.clicked.connect(self.meta_data_3)

        self.dlg.pushButton.clicked.connect(self.end)
        result = self.dlg.pushButton_5.clicked.connect(self.final)
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
