# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoLDN
                                 A QGIS plugin
 Tool for land degradation neutrality
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-22
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Sharad
        email                : sharadgupta27@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QAbstractItemView, QFileDialog
from qgis.PyQt.QtCore import *
from qgis.PyQt import QtGui
from PyQt5.QtWidgets import QMessageBox
from qgis.PyQt.QtWidgets import QProgressBar
import time

from qgis.core import QgsApplication, QgsMessageLog, Qgis, QgsGeometry

from qgis.gui import (
    QgsMessageBar,
)

from qgis.PyQt.QtWidgets import QApplication, QMenu, QSizePolicy, QPushButton, QDialog, QGridLayout, QDialogButtonBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .geo_ldn_dialog import GeoLDNDialog
import os.path

import math
import ee

from . import lzero

class GeoLDN:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GeoLDN_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Level 0 - Data Preparation')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GeoLDN', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/geo_ldn/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Land Degradation Neutrality'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&UNCCD-GeoLDN'),
                action)
            self.iface.removeToolBarIcon(action)


    #==============================================================================================
    
    def get_output_directory(self):
        output_directory = str(QFileDialog.getExistingDirectory(None, "Select Directory"))
        self.dlg.lineEdit.setText(output_directory)
    
    def get_shape_file(self):
        shape_file_name, _filter = QFileDialog.getOpenFileName(self.dlg, "Select shape file", "", "*.shp")
        self.dlg.lineEdit_2.setText(shape_file_name)

    def read_start_end(self):
        start = self.dlg.dateEdit.date().toPyDate()
        start = str(start)
        start = '/'.join(start.split('-'))
        end = self.dlg.dateEdit_2.date().toPyDate()
        end = str(end)
        end = '/'.join(end.split('-'))
        return [start, end]

        
    def read_coordinates(self):
        spatial_extent = []
        spatial_extent.append(str(self.dlg.textEdit.toPlainText()))
        spatial_extent.append(str(self.dlg.textEdit_2.toPlainText()))
        spatial_extent.append(str(self.dlg.textEdit_3.toPlainText()))
        spatial_extent.append(str(self.dlg.textEdit_4.toPlainText()))
        return spatial_extent

    def read_spatial_resolution(self, spatial_resolution=[]):
        spatial_resolution.append(str(self.dlg.textEdit_5.toPlainText()))
        spatial_resolution.append(str(self.dlg.textEdit_6.toPlainText()))
        return spatial_resolution

    
    def clipper_select(self):
        if self.dlg.radioButton.isChecked():
            self.dlg.pushButton_4.clicked.connect(self.get_shape_file)
            return [self.dlg.lineEdit_2.text(), 'shape']
 

        elif self.dlg.radioButton_2.isChecked():
            coords = self.read_coordinates()
            return [coords, 'coords']
            
    
    def select_process_level(self):
        selection = str(self.dlg.comboBox_2.currentText())
        if selection == 'Yearly Mean':
            lzero.schedule = 'yearly'
        elif selection == 'Monthly Mean':
            lzero.schedule = 'monthly'
        else:
            lzero.schedule = 'duration'
            
    def select_vegetation(self):
        if self.dlg.radioButton_4.isChecked():
            return 'landsat8'
        elif self.dlg.radioButton_3.isChecked():
            return 'landsat5'
        else:
            return 'modis'

    def arguments_assignment(self):
        if (lzero.args.te == None) and (lzero.args.tek == None) and (lzero.args.tes == None):
            lzero.clipper = None
        elif lzero.args.te:
            lzero.clipper = lzero.args.te
            #lzero.clipper = ['70.0', '24.0', '74.0', '28.0']
            lzero.clipper = [float(x) for x in lzero.clipper]
            lzero.spatial_extent = ee.Geometry.Rectangle(lzero.clipper)
        elif lzero.args.tek:
            lzero.clipper = lzero.args.tek
        elif lzero.args.tes:
            lzero.clipper = lzero.args.tes

        if (lzero.args.tr == None):
            # lzero.clipper = [0.0025, 0.0025]
            # lzero.some_alt = [0.0025, 0.0025]
            lzero.x_spatial_res = 0.005
            lzero.x_spatial_res = lzero.x_spatial_res*3600
            lzero.y_spatial_res = 0.005
            lzero.y_spatial_res = lzero.y_spatial_res*3600
            try:
                lzero.output_scale = math.ceil(lzero.y_spatial_res*math.cos(lzero.clipper[1]*(math.pi)/180)*30.866666667)
                lzero.utm_zone = round((lzero.clipper[0] + 180) / 6)
            except:
                lzero.output_scale = math.ceil(lzero.y_spatial_res*math.cos(24*(math.pi)/180)*30.866666667)
                lzero.utm_zone = round((70 + 180) / 6)
            lzero.epsg_code = 'EPSG:' + str(32600 + lzero.utm_zone)

        else:
            lzero.x_spatial_res = float(lzero.args.tr[0])
            lzero.x_spatial_res = lzero.x_spatial_res * 3600
            lzero.y_spatial_res = float(lzero.args.tr[1])
            lzero.y_spatial_res = lzero.y_spatial_res * 3600
            lzero.output_scale = math.ceil(lzero.y_spatial_res*math.cos(lzero.clipper[1]*(math.pi)/180)*30.866666667)
            lzero.utm_zone = round((lzero.clipper[0] + 180) / 6)
            lzero.epsg_code = 'EPSG:' + str(32600 + lzero.utm_zone)

        if (lzero.args.tt == None):
            lzero.start_date = '2016/01/01'
            lzero.end_date = '2016/12/31'
        else:
            lzero.start_date = lzero.args.tt[0]
            lzero.end_date = lzero.args.tt[1]


        if lzero.args.pre_ft == None:
            lzero.prefix = 'thar'
        else:
            lzero.prefix = lzero.args.pre_ft
            
        if True: #args.Zo == None:
            if not lzero.args.a:
                a = 0.04859
            else:
                a = lzero.args.a

            if not lzero.args.b:
                b = 0.052
            else:
                b = lzero.args.b


    def final(self):
        lzero.output_directory = self.dlg.lineEdit.text()

        temp = self.clipper_select()
        if 'shape' in self.clipper_select():
            lzero.args.tes = self.clipper_select()[0]
        else:
            lzero.args.te = self.clipper_select()[0]

        lzero.args.tt = self.read_start_end()

        lzero.args.tr = self.read_spatial_resolution()

        self.select_process_level()

        lzero.evi = self.select_vegetation()
        
        self.arguments_assignment()

        lzero.main_run()
        self.iface.messageBar().pushMessage("Success", "Files exported successfully.", level=Qgis.Success)

       # self.dlg.close()
    
    def message_box(self):
        infoBox = QMessageBox()
        infoBox.setIcon(QMessageBox.Information)
        infoBox.setText("Level 0 - GeoLDN Tool")
        infoBox.setWindowTitle("Help")
        infoBox.setStandardButtons(QMessageBox.Ok)# | QMessageBox.Cancel)
        infoBox.setEscapeButton(QMessageBox.Close)
        infoBox.exec()

    def reset(self):
        self.dlg.lineEdit.clear()
        self.dlg.lineEdit_2.clear()
        self.dlg.textEdit.clear()
        self.dlg.textEdit_2.clear()
        self.dlg.textEdit_3.clear()
        self.dlg.textEdit_4.clear()
        self.dlg.textEdit_5.clear()
        self.dlg.textEdit_6.clear()

    def end(self):
        self.dlg.lineEdit.clear()
        self.dlg.lineEdit_2.clear()
        self.dlg.textEdit.clear()
        self.dlg.textEdit_2.clear()
        self.dlg.textEdit_3.clear()
        self.dlg.textEdit_4.clear()
        self.dlg.textEdit_5.clear()
        self.dlg.textEdit_6.clear()
        self.dlg.close()
        self.iface.messageBar().pushMessage("Success", "GeoLDN tool executed successfully.", level=Qgis.Success)



    #==============================================================================================

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GeoLDNDialog()
            from qgis.core import Qgis
            self.iface.messageBar().pushMessage("Success", "GeoLDN tool started successfully.", level=Qgis.Success)
        
        

        # show the dialog
        self.dlg.show()
        self.iface.messageBar().pushMessage("Success", "GeoLDN tool started successfully.", level=Qgis.Success)
        # Run the dialog event loop

        # Get output directory


        self.dlg.radioButton.setChecked(True)
        self.dlg.pushButton_2.clicked.connect(self.message_box)
        self.dlg.pushButton_3.clicked.connect(self.get_output_directory)
        self.dlg.pushButton_4.clicked.connect(self.get_shape_file)
        self.dlg.pushButton_5.clicked.connect(self.end)
        self.dlg.pushButton_6.clicked.connect(self.reset)
        result = self.dlg.pushButton.clicked.connect(self.final)


        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.

            pass
